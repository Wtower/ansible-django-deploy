---
# Deploys a Django app to Plesk

- name: Check that project path in dev as specified in configuration is valid and has wsgi script
  local_action: stat path={{ conf.dev_path }}/{{ conf.wsgi_script }}
  register: check_dev_path
  failed_when: check_dev_path.stat.exists == False

- name: Check if gulp file exists
  local_action: stat path={{ conf.dev_path }}/gulpfile.js
  register: check_gulp_file

- name: Execute gulp
  local_action: command gulp build --production chdir={{ conf.dev_path }}
  when: check_gulp_file.stat.exists == True

- name: Set Python executable
  set_fact: python="`which python{{ conf.python_version | default('3.5') }}`"

- name: Make virtualenv
  shell: "source ~/.bash_profile && mkvirtualenv {{ project }} --python={{ python }} --no-site-packages"
  args:
    executable: /bin/bash
    creates: "{{ virtualenv_dir }}/{{ project }}"
  register: mkvirtualenv
  failed_when: 'mkvirtualenv.changed and "New python executable" not in mkvirtualenv.stdout'

- name: Check New Relic conf file
  local_action: stat path={{ conf.dev_path }}/newrelic.ini
  register: check_new_relic_file

- name: Configure New Relic
  template: src="newrelic.ini.j2" dest="{{ virtualenv_dir }}/{{ project }}.newrelic.ini" backup=yes
  when: check_new_relic_file == False and newrelic is defined

- name: Open ownership
  file: name="{{ conf.host_path }}" owner="{{ ansible_user_id }}" mode=0775 state=directory recurse=yes
  become: true

- name: Build sync options
  set_fact:
    sync_opts_user:
      - "--exclude={{ exclude }}"
  when: exclude is defined

- name: Sync files
  synchronize:
    src: "{{ conf.dev_path }}/"
    dest: "{{ conf.host_path }}"
    delete: yes
    rsync_opts: "{{ sync_opts + sync_opts_user|default([]) }}"

- name: Upgrade pip
  pip:
    name: "{{ item }}"
    state: latest
    virtualenv: "{{ virtualenv_dir }}/{{ project }}"
  with_items:
    - pip
    - setuptools
    - wheel

- name: Install pip requirements
  pip:
    requirements: "{{ conf.host_path }}/requirements.txt"
    virtualenv: "{{ virtualenv_dir }}/{{ project }}"

- name: Set Django admin executable
  set_fact: manage="{{ virtualenv_dir }}/{{ project }}/bin/python {{ conf.host_path }}/manage.py"

- name: Set Django admin settings
  set_fact: settings="--settings={{ conf.name | default(project) }}.{{ django_settings }}"

- name: Migrate
  shell: "{{ manage }} migrate {{ settings }}"
  register: migrate_result
  changed_when: '"No migrations to apply." not in migrate_result.stdout'

- name: Flush data
  shell: "{{ manage }} flush --noinput {{ settings }}"
  when: loaddata is defined and loaddata == 'true' and flush is defined and flush == 'true'

- name: Load data
  shell: "{{ manage }} loaddata {{ item }} {{ settings }}"
  args:
    chdir: "{{ conf.host_path }}"
  when: loaddata is defined and loaddata == 'true'
  with_items: '{{ conf.data }}'
  register: loaddata_results
  failed_when: '"Installed" not in loaddata_results.stdout'

- name: Collect static
  shell: "{{ manage }} collectstatic --noinput {{ settings }}"

- name: Compile messages
  shell: "{{ manage }} compilemessages {{ settings }}"
  when: conf.compile_msgs is defined and conf.compile_msgs

- name: Clear cache
  shell: echo "from django.core.cache import cache; cache._cache.flush_all()" | {{ manage }} shell {{ settings }}
  when: conf.memcached is defined and conf.memcached

- name: Post deployment script
  shell: echo "{{ conf.post_script }}" | {{ manage }} shell {{ settings }}
  when: conf.post_script is defined and conf.post_script

- name: Close ownership to Plesk account group
  file:
    name: "{{ conf.host_path }}"
    owner: "{{ conf.host_user }}"
    group: "{{ plesk_account_group }}"
    mode: 0775
    state: directory
    recurse: yes
  become: true

- name: Close ownership to Plesk server group
  file:
    name: "{{ conf.host_path }}"
    owner: "{{ conf.host_user }}"
    group: "{{ plesk_server_group }}"
    state: directory
  become: true

- name: Configure Apache
  template: src="vhost.conf.j2" dest="/var/www/vhosts/{{ conf.domain_name }}/conf/vhost.conf" backup=yes
  become: true
  when: conf.domain_name is defined and (conf.https_only is not defined or not conf.https_only)
  notify:
    - Reconfigure Plesk domain
    - Restart Apache

- name: Configure Apache SSL
  template: src="vhost.conf.j2" dest="/var/www/vhosts/{{ conf.domain_name }}/conf/vhost_ssl.conf" backup=yes
  become: true
  when: conf.domain_name is defined
  notify:
    - Reconfigure Plesk domain
    - Restart Apache
